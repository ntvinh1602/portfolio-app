name: Prune old GitHub deployments

on:
  workflow_dispatch: # allow manual trigger
  schedule:
    - cron: "0 4 * * 0" # run weekly, Sunday 4AM UTC

jobs:
  prune:
    runs-on: ubuntu-latest

    permissions:
      deployments: write   # needed for deleting deployments
      contents: read       # safe default

    steps:
      - name: Delete old deployments
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const KEEP = 10;
            const { data: deployments } = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100,
            });

            if (deployments.length <= KEEP) {
              core.info(`Only ${deployments.length} deployments exist, nothing to delete.`);
              return;
            }

            // keep newest 10, delete the rest
            const toDelete = deployments.slice(KEEP);

            for (const dep of toDelete) {
              core.info(`Deleting deployment ${dep.id} (ref: ${dep.ref})`);

              // delete deployment statuses first
              const { data: statuses } = await github.rest.repos.listDeploymentStatuses({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: dep.id,
              });

              for (const status of statuses) {
                await github.request(
                  "DELETE /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}",
                  {
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    deployment_id: dep.id,
                    status_id: status.id,
                  }
                );
                core.info(`  - Deleted status ${status.id}`);
              }

              // delete the deployment
              await github.rest.repos.deleteDeployment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: dep.id,
              });

              core.info(`  âœ… Deployment ${dep.id} deleted`);
            }
