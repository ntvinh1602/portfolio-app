name: Prune old GitHub deployments

on:
  workflow_dispatch: # manual trigger
  schedule:
    - cron: "0 4 * * 0" # weekly Sunday 4 AM UTC

jobs:
  prune:
    runs-on: ubuntu-latest

    permissions:
      deployments: write
      contents: read

    steps:
      - name: Safe deployment cleanup
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const KEEP = 10;

            // fetch deployments
            const { data: deployments } = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            if (deployments.length <= KEEP) {
              core.info(`Only ${deployments.length} deployments exist. Nothing to delete.`);
              return;
            }

            // sort newest first
            deployments.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            const toDelete = deployments.slice(KEEP);

            core.info(`Keeping ${KEEP}, deleting ${toDelete.length} deployments...`);

            for (const dep of toDelete) {
              core.info(`Processing deployment ${dep.id} (ref: ${dep.ref}, environment: ${dep.environment})`);

              // fetch statuses
              const { data: statuses } = await github.rest.repos.listDeploymentStatuses({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: dep.id
              });

              for (const status of statuses) {
                try {
                  await github.request(
                    "DELETE /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}",
                    {
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      deployment_id: dep.id,
                      status_id: status.id
                    }
                  );
                  core.info(`  - Deleted status ${status.id}`);
                } catch (e) {
                  core.warning(`  - Failed to delete status ${status.id}: ${e}`);
                }
              }

              // delete deployment
              try {
                await github.rest.repos.deleteDeployment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  deployment_id: dep.id
                });
                core.info(`✅ Deployment ${dep.id} deleted`);
              } catch (e) {
                core.warning(`⚠️ Failed to delete deployment ${dep.id}: ${e}`);
              }
            }
